#+TITLE: My Tech Journal
#+AUTHOR: Nick Weight

* Emacs Doom : [[https://github.com/hlissner/doom-emacs/blob/develop/docs/index.org][Docs]]
** [[https://www.youtube.com/user/ohzaiste][This]] is a good series of videos about using Doom mode
** When you install new packages always run:
#+BEGIN_SRC shell
doom install
#+END_SRC
** When you update your configs in anyway always run:
#+BEGIN_SRC shell
doom refresh
#+END_SRC
** Upgrade doom configs:
#+BEGIN_SRC shell
doom upgrade
#+END_SRC
** Update all installed packages:
#+BEGIN_SRC shell
doom update
#+END_SRC
** Pressing =SPC= opens a pop up with possible keys.
** Legend: kinda following the example [[http://www.angelwatt.com/coding/notes/vim-commands.html][here]]
*** =<C-key>= Control plus key
*** =<S-key>= Shift plus key
*** =<M-key>= Meta (on mac this is option) plus key
*** =<SPC key>= Space than key. Space is set to leader.
** DONE Figure out how to turn on relative line numbers
*** Set in config.org
*** =<SPC t l>= toggles between line numbering types
** TODO Figure out how to set relative as default option in editing windows
** =<g s SPC= opens up easy-motion or avy. Type two letters and will jump to word if single occurance. Will give letter options for multiple occurances.
*** Easy deletion of selections. Once given letter propmtings press =X= then the prompt to delete the selected word.
*** Following from above. If you pre =i= and the prompt selection you get ispell spelling checker
** evil-multiedit:
*** =<M-(d/D)>= select words to multi-edit. =d= next and =D= for previous
*** in visual mode =<M-R>= selects all occurances
*** =<RET>= toggles selection of item under cursor
*** Move between selections with =<C-n>= (next) and =<C-p>= (previous)
** Word wrap: =<SPC t w>=
** Rename file in emacs doom
*** Open dir =<SPC o ->=
*** Navigate to file in directory
*** =R= to rename
** Looked up:
*** =<M-x command>= This allows you to promt the command pop-up and run commands
*** =<SPC f .>= to find a file to opens
*** =<SPC TAB .>= switch between workspaces
* Doom org-mode : [[https://github.com/Somelauw/evil-org-mode/blob/master/doc/keythemes.org][Docs]]
** =<M-Ret>= adds a newline at the same level
** =<M-(j/k/up-arrow/down-arrow)>= Moves the line up or down insides level
** =<M-S-(j/k/up-arrow/down-arrow)>= Moves the line up or down
** =<M-(h/l/left-arrow/right-arrow>= Promote or demote headlines
** =<SPC m l l>= : Inserts a linke ( I think it stands for m: make, l: link, l:insert link )
** =<S-(left-arrow/right-arrow)>= Toggles todo
** =<] [>= Next h1
** =<[ ]= Previous headline
* Vim
** [[http://www.angelwatt.com/coding/notes/vim-commands.html][Good Cheat sheet]]
** =find= and =snipe= work the same in vim and emacs. They are improved in EMacs by doing multi-line.
*** You can use =;= to go to the next instance and =,= to go to the previous
** adjust block of text (manually add comments):
1. select the first caracter of your block
2. press =<C-v>= ( this is rectangular visual selection mode)
3. type =j= for each line more you want to be commented
4. type Shift-i (like I for "insert at start")
5. type // (or # or " or ...)
6. you will see the modification appearing only on the first line
7. IMPORTANT LAST STEP: type Esc key, and there you see the added character appear on all lines
** Frequently looked up:
***
* Python
** Set pip requirements:
#+BEGIN_SRC bash
pip3 freeze > requirements.txt
#+END_SRC
** Import pip requirements:
#+BEGIN_SRC shell
pip3 install -r requirements.txt
#+END_SRC
** Add new kv pair to dict:
#+BEGIN_SRC python
wordFreqDic.update( {'before' : 23} )
#+END_SRC
** Editing files ([[https://realpython.com/read-write-files-python/][good guide]]):
#+BEGIN_SRC python
with open('dog_breeds.txt', 'r') as reader:
    # Read and print the entire file line by line
    for line in reader:
        print(line, end='')
#+END_SRC
* GO
* Gmail
* Dotfiles
* Git
** If your branch is behind master and the changes dont impact your branch, rebase!
#+BEGIN_SRC shell
git fetch
git rebase origin/master
git pull
git push
#+END_SRC
** great article about understanding git is [[https://missing.csail.mit.edu/2020/version-control/][Version Control (Git) Â· the missing semester of your cs education]].
* jetbrains
** ideavim
*** add the following lines to =~/..ideavimrc=
** intellij
* terraform
** create a new aws-module for =chg-terraform-infrastructure=
*** create a new directory in =~/repos/chg-terraform-infrastructure/modules= named =aws-<module>=
*** create a =main.tf=, =locals.tf=, =variables.tf=, =locals.tf=, and =version.tf=
**** todo make template versions of these files if possible
**** =main.tf= will follow the steps for using the terraform aws module
**** yada yada yada for the rest of the files
*** create a =aws-<module>.tf= file in the coresponding services directory (platform or core)
**** this file should create the needed variables, locals and outputs for your tfvars file, and import your new module from =source = "../../modules/aws-<module>=
** how to use my aws sandbox
*** go to the directory for the appropriate tf service (=~/repos/chg-terraform-infrastructure/services/platform= or =~/repos/chg-terraform-infrastructure/services/core=)
*** grab creds for sb-nweight (awsadministratoraccess) and paste in terminal. # note: hopefully awc-cli sso login works soon for terraform
*** change to sb-nweight workspace. =tfw select sb-nweight=
*** make sure you are in the sb-nweight workspace =tfw list=. sb-nweight should have an asterix next to it.
*** run a =terraform plan= using the platform-services.tfvars in the (=~/repos/chg-terraform-infrastructure/workspaces/sandboxs=) directory. =tfp -var-file=../../workspaces/sandboxs/platform-services.tfvars=
*** if it all looks correct, run =terraform apply= using the same tfvars file. =tfa -var-file=../../workspaces/sandboxs/platform-services.tfvars=
** commonly used (maybe think of making alias or tools)
*** =tfw list= to see all workspaces
*** =tfw select <workspace>= selects the workspace
** commonly looked up
** todo create tool to generate readme.md in github markdown
*** go
*** if you run in the current directory it pulls stuff from your project
*** prompt for info as its running similar to =readme-md-generator=
* jenkins
* kubernetes
** find what pods are on a =<node>=
#+begin_src shell
kubectl get pods --all-namespaces -o wide --field-selector spec.nodename=<node>
#+end_src
* helm
* aws
** console
** cli
*** aliases :
**** =aws.sso <profile>= : uses sso to log into a profile (note: this login method is not understood by terraform yet)
*
* github markdown
** you can get github user's avatar by adding a .png to the end of their homepage
*** example: =https://github.com/nickw8= to =https://github.com/nickw8.png=
*** this will take you to a page where you can do more things. =https://avatars3.githubusercontent.com/u/1335600?v=4=
**** if you add a =&s=150= it will give you a version that is 150x150
** a good article on readme structure https://github.com/noffle/art-of-readme
* shell
** symlinks:
#+begin_src shell
ln -s file1 link1
#+end_src
** Readline: The command line editor
*** TODO Decide if I want to learn Readline or stick with vim mode.
*** Good youtube video about [[https://www.youtube.com/watch?v=MxRTh8wlmJk&t=754s][ReadLine]]
